print("s vishnu vardhan 192110147")
def evaluate(board):
    # Simple evaluation function for tic-tac-toe
    for row in board:
        if all(cell == 'X' for cell in row):
            return 1
        elif all(cell == 'O' for cell in row):
            return -1
    for col in range(3):
        if all(board[row][col] == 'X' for row in range(3)):
            return 1
        elif all(board[row][col] == 'O' for row in range(3)):
            return -1
    if all(board[i][i] == 'X' for i in range(3)) or all(board[i][2 - i] == 'X' for i in range(3)):
        return 1
    elif all(board[i][i] == 'O' for i in range(3)) or all(board[i][2 - i] == 'O' for i in range(3)):
        return -1
    return 0
def is_terminal_node(board):
    # Check if the game is over
    return evaluate(board) != 0 or all(all(cell != '-' for cell in row) for row in board)
def min_max_alpha_beta_pruning(board, depth, alpha, beta, maximizing_player):
    if depth == 0 or is_terminal_node(board):
        return evaluate(board)
    if maximizing_player:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == '-':
                    board[i][j] = 'X'
                    eval_val = min_max_alpha_beta_pruning(board, depth - 1, alpha, beta, False)
                    max_eval = max(max_eval, eval_val)
                    alpha = max(alpha, eval_val)
                    board[i][j] = '-'
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == '-':
                    board[i][j] = 'O'
                    eval_val = min_max_alpha_beta_pruning(board, depth - 1, alpha, beta, True)
                    min_eval = min(min_eval, eval_val)
                    beta = min(beta, eval_val)
                    board[i][j] = '-'
                    if beta <= alpha:
                        break
        return min_eval
def find_best_move(board):
    best_val = float('-inf')
    best_move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == '-':
                board[i][j] = 'X'
                move_val = min_max_alpha_beta_pruning(board, 2, float('-inf'), float('inf'), False)
                board[i][j] = '-'
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    return best_move
initial_board = [['-', '-', '-'],
                 ['-', '-', '-'],
                 ['-', '-', '-']]
print("Initial Board:")
for row in initial_board:
    print(row)
best_move = find_best_move(initial_board)
print("\nBest Move:", best_move)
