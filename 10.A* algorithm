print("s vishnu vardhan 192110147")
import heapq
def astar(grid, start, goal):
    def heuristic(node):
        x1, y1 = node
        x2, y2 = goal
        return abs(x1 - x2) + abs(y1 - y2)
    open_list = []
    closed_set = set()
    start_node = (0, start)
    heapq.heappush(open_list, start_node)
    while open_list:
        _, current = heapq.heappop(open_list)
        x, y = current
        if current == goal:
            path = []
            while current:
                path.append(current)
                current = came_from.get(current)
            return list(reversed(path))
        closed_set.add(current)
        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            new_x, new_y = x + dx, y + dy
            new_node = (new_x, new_y)
            if (
                0 <= new_x < len(grid) and
                0 <= new_y < len(grid[0]) and
                grid[new_x][new_y] == 0 and
                new_node not in closed_set
            ):
                tentative_g_score = g_score[current] + 1
                if new_node not in [item[1] for item in open_list] or tentative_g_score < g_score[new_node]:
                    came_from[new_node] = current
                    g_score[new_node] = tentative_g_score
                    f_score = tentative_g_score + heuristic(new_node)
                    heapq.heappush(open_list, (f_score, new_node))
    return None
grid = [
    [0, 0, 0, 0, 0],
    [0, 1, 1, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 0, 1, 1, 0],
    [0, 0, 0, 0, 0]
]
start = (0, 0)
goal = (4, 4)
came_from = {}
g_score = {start: 0}
path = astar(grid, start, goal)
if path:
    print(f'Shortest path from {start} to {goal}: {path}')
else:
    print(f'No path found from {start} to {goal}')
